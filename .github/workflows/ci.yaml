name: Deploy Go Backend to VPS

on:
  push:
    branches: [ main, master ]

env:
  APP_NAME: integrator_backend
  APP_DIR: /opt/integrator_backend
  DEPLOY_USER: deployer

jobs:
  deploy:
    runs-on: integrator_backend
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Get dependencies
      run: go mod download
    
    - name: Build application
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o integrator_backend .
        ls -la integrator_backend
    
    - name: Setup SSH key and known hosts
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Add SSH private key
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Add server to known hosts to avoid host verification prompt
        ssh-keyscan -p 2222 ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
    
    - name: Stop existing application
      run: |
        echo "🛑 Stopping existing application..."
        ssh -i ~/.ssh/deploy_key -p 2222 -o StrictHostKeyChecking=no \
          deployer@${{ secrets.VPS_HOST }} \
          'sudo systemctl stop integrator_backend.service || true; sleep 2'
    
    - name: Backup current binary (if exists)
      run: |
        echo "📦 Backing up current binary..."
        ssh -i ~/.ssh/deploy_key -p 2222 -o StrictHostKeyChecking=no \
          deployer@${{ secrets.VPS_HOST }} \
          'if [ -f "/opt/integrator_backend/integrator_backend" ]; then 
             cp "/opt/integrator_backend/integrator_backend" "/opt/integrator_backend/integrator_backend.backup.$(date +%Y%m%d_%H%M%S)"
             echo "Backup created"
           else
             echo "No existing binary to backup"
           fi'
    
    - name: Copy new binary to VPS
      run: |
        echo "📤 Copying binary to VPS..."
        scp -i ~/.ssh/deploy_key -P 2222 -o StrictHostKeyChecking=no \
          integrator_backend deployer@${{ secrets.VPS_HOST }}:/opt/integrator_backend/
        echo "Binary copied successfully"
    
    - name: Copy migration files to VPS
      run: |
        echo "📤 Copying migration files..."
        # Copy migrations directory if it exists
        if [ -d "migrations" ]; then
          ssh -i ~/.ssh/deploy_key -p 2222 -o StrictHostKeyChecking=no \
            deployer@${{ secrets.VPS_HOST }} \
            'mkdir -p /opt/integrator_backend/migrations'
          scp -i ~/.ssh/deploy_key -P 2222 -o StrictHostKeyChecking=no \
            -r migrations/* deployer@${{ secrets.VPS_HOST }}:/opt/integrator_backend/migrations/
          echo "Migration files copied"
        else
          echo "No migrations directory found"
        fi
  
    - name: Set binary permissions and prepare for deployment
      run: |
        echo "🔧 Setting up binary permissions..."
        ssh -i ~/.ssh/deploy_key -p 2222 -o StrictHostKeyChecking=no \
          deployer@${{ secrets.VPS_HOST }} \
          'chmod +x "/opt/integrator_backend/integrator_backend" && 
           sudo systemctl daemon-reload'
    
    - name: Check migration status
      run: |
        echo "🔍 Checking current migration status..."
        ssh -i ~/.ssh/deploy_key -p 2222 -o StrictHostKeyChecking=no \
          deployer@${{ secrets.VPS_HOST }} \
          'cd /opt/integrator_backend && 
           echo "Current migration version:"
           ./integrator_backend -migrate-version || echo "Could not determine current version"'
    
    - name: Run database migrations
      run: |
        echo "🔄 Running database migrations..."
        ssh -i ~/.ssh/deploy_key -p 2222 -o StrictHostKeyChecking=no \
          deployer@${{ secrets.VPS_HOST }} \
          'cd /opt/integrator_backend && 
           echo "Running migrations..."
           ./integrator_backend -migrate || {
             echo "❌ Migration failed"
             echo "Checking if migrate CLI tool is installed..."
             which migrate || echo "migrate CLI not found - install with: curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz && sudo mv migrate /usr/local/bin/"
             exit 1
           }
           echo "✅ Migrations completed"
           echo "New migration version:"
           ./integrator_backend -migrate-version || echo "Could not determine version"'
    
    - name: Start application
      run: |
        echo "🚀 Starting application..."
        ssh -i ~/.ssh/deploy_key -p 2222 -o StrictHostKeyChecking=no \
          deployer@${{ secrets.VPS_HOST }} \
          'sudo systemctl start integrator_backend.service && sleep 3'
        
    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        ssh -i ~/.ssh/deploy_key -p 2222 -o StrictHostKeyChecking=no \
          deployer@${{ secrets.VPS_HOST }} \
          'echo "Checking service status..."
           if sudo systemctl is-active --quiet integrator_backend.service; then
             echo "✅ Service is active and running"
             sudo systemctl status integrator_backend.service --no-pager -l
           else
             echo "❌ Service is not running"
             echo "=== Service status ==="
             sudo systemctl status integrator_backend.service --no-pager -l || true
             echo "=== Recent logs ==="
             sudo journalctl -u integrator_backend.service --no-pager -n 30 || true
             echo "=== Binary info ==="
             ls -la /opt/integrator_backend/integrator_backend || true
             echo "=== Manual test ==="
             echo "Testing binary manually for 5 seconds..."
             timeout 5s /opt/integrator_backend/integrator_backend || echo "Binary test completed (exit code: $?)"
             exit 1
           fi'
    
    - name: Health check (optional)
      run: |
        echo "🏥 Performing health check..."
        ssh -i ~/.ssh/deploy_key -p 2222 -o StrictHostKeyChecking=no \
          deployer@${{ secrets.VPS_HOST }} \
          'echo "Waiting for application to fully start..."
           sleep 5
           echo "Testing application endpoint..."
           curl -f http://localhost:8080/integrator/api/v1/health-check || {
             echo "❌ Health check failed or endpoint not available"
             echo "This might be normal if no health check endpoint exists"
           }
           echo "✅ Application appears to be running"'
    
    - name: Cleanup old backups (keep last 5)
      run: |
        echo "🧹 Cleaning up old backups..."
        ssh -i ~/.ssh/deploy_key -p 2222 -o StrictHostKeyChecking=no \
          deployer@${{ secrets.VPS_HOST }} \
          'cd "/opt/integrator_backend" && 
           ls -t integrator_backend.backup.* 2>/dev/null | tail -n +6 | xargs -r rm -f &&
           echo "Cleanup completed"'
    
    - name: Cleanup SSH key
      if: always()
      run: |
        # Remove SSH key for security
        rm -f ~/.ssh/deploy_key